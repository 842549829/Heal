// <auto-generated />
using System;
using Heal.Net.EntityFrameworkCore.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Heal.Net.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HealNetDbContext))]
    [Migration("20250418013255_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Heal.Net.Domain.Bases.Campuses.Entities.Campus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Address")
                        .HasComment("所在详细地址");

                    b.Property<string>("Building")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Building")
                        .HasComment("所在大楼");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity")
                        .HasComment("院区容量");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Email")
                        .HasComment("联系邮箱");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("EmergencyContact")
                        .HasComment("紧急联系人名称");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("EmergencyPhone")
                        .HasComment("紧急联系人电话");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Floor")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Floor")
                        .HasComment("所在楼层");

                    b.Property<string>("HeadOfCampus")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("HeadOfCampus")
                        .HasComment("院区负责人");

                    b.Property<string>("HeadOfCampusEmail")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("HeadOfCampusEmail")
                        .HasComment("院区负责人邮箱");

                    b.Property<string>("HeadOfCampusPhone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("HeadOfCampusPhone")
                        .HasComment("院区负责人电话");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<string>("OrganizationCode")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("OrganizationCode")
                        .HasComment("组织Code");

                    b.Property<Guid>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("OrganizationId")
                        .HasComment("组织Id");

                    b.Property<Guid?>("ParentId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("ParentId")
                        .HasComment("父级Id");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Phone")
                        .HasComment("联系电话");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("RoomNumber")
                        .HasComment("所在房间");

                    b.Property<string>("ServicesOffered")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("ServicesOffered")
                        .HasComment("院区提供的服务");

                    b.Property<string>("ShortName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("ShortName")
                        .HasComment("简称");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Website")
                        .HasComment("院区网站");

                    b.HasKey("Id");

                    b.ToTable("AbpCampus", null, t =>
                        {
                            t.HasComment("院区");
                        });
                });

            modelBuilder.Entity("Heal.Net.Domain.Bases.Departments.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Address")
                        .HasComment("所在详细地址");

                    b.Property<string>("Building")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Building")
                        .HasComment("所在大楼");

                    b.Property<Guid?>("CampusId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CampusId")
                        .HasComment("所在院区Id");

                    b.Property<string>("Campuses")
                        .HasColumnType("longtext");

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("Capacity")
                        .HasComment("科室容量");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DepartmentTypeId")
                        .HasComment("科室类型Id");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<string>("Email")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Email")
                        .HasComment("联系邮箱");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("EmergencyContact")
                        .HasComment("紧急联系人名称");

                    b.Property<string>("EmergencyPhone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("EmergencyPhone")
                        .HasComment("紧急联系人电话");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Floor")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Floor")
                        .HasComment("所在楼层");

                    b.Property<string>("HeadOfDepartment")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("HeadOfDepartment")
                        .HasComment("科室负责人");

                    b.Property<string>("HeadOfDepartmentEmail")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("HeadOfDepartmentEmail")
                        .HasComment("科室负责人邮箱");

                    b.Property<string>("HeadOfDepartmentPhone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("HeadOfDepartmentPhone")
                        .HasComment("科室负责人电话");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<string>("OrganizationCode")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("OrganizationCode")
                        .HasComment("组织Code");

                    b.Property<Guid>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("OrganizationId")
                        .HasComment("组织Id");

                    b.Property<Guid?>("ParentId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("ParentId")
                        .HasComment("父级Id");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Phone")
                        .HasComment("联系电话");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<string>("RoomNumber")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("RoomNumber")
                        .HasComment("所在房间");

                    b.Property<string>("ServicesOffered")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("ServicesOffered")
                        .HasComment("科室提供的服务");

                    b.Property<string>("ShortName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("ShortName")
                        .HasComment("简称");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("Website")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Website")
                        .HasComment("科室网站");

                    b.HasKey("Id");

                    b.ToTable("AbpDepartment", null, t =>
                        {
                            t.HasComment("科室");
                        });
                });

            modelBuilder.Entity("Heal.Net.Domain.Bases.Users.Entities.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("AddressLine")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("详细地址");

                    b.Property<string>("Avatar")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Avatar")
                        .HasComment("头像");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)")
                        .HasComment("生日");

                    b.Property<string>("CityCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("城市代码");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasComment("天");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("区县代码");

                    b.Property<string>("Education")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Education")
                        .HasComment("学历");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("邮箱");

                    b.Property<string>("EvaluateClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("EvaluateClassify")
                        .HasComment("评价分类");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Gender")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("性别");

                    b.Property<DateTime?>("GraduationDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GraduationDate")
                        .HasComment("毕业时间");

                    b.Property<string>("IdCardNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("证件号");

                    b.Property<string>("IdCardType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("证件类型");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<bool>("IsOpenLogin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsOpenLogin")
                        .HasComment("是否开放登录");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Major")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Major")
                        .HasComment("专业");

                    b.Property<string>("MedicalSchool")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("MedicalSchool")
                        .HasComment("毕业院校");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<string>("NationCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("国家代码");

                    b.Property<string>("OccupationClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("OccupationClassify")
                        .HasComment("类型(按职业分类)");

                    b.Property<string>("OrganizationCode")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("OrganizationCode")
                        .HasComment("组织Code");

                    b.Property<Guid>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("OrganizationId")
                        .HasComment("组织Id");

                    b.Property<string>("PeculiarityClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PeculiarityClassify")
                        .HasComment("类型(按特质类型分类)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("手机");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<string>("PracticeClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PracticeClassify")
                        .HasComment("执业分类");

                    b.Property<string>("PracticeExperience")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("PracticeExperience")
                        .HasComment("执业经历");

                    b.Property<string>("PracticeLicenseNumber")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("PracticeLicenseNumber")
                        .HasComment("执业许可证编号");

                    b.Property<string>("PracticeScope")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PracticeScope")
                        .HasComment("执业范围");

                    b.Property<DateTime?>("PracticeValidityDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("PracticeValidityDate")
                        .HasComment("执业有效期");

                    b.Property<string>("ProfessionalClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ProfessionalClassify")
                        .HasComment("专业分类");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("省份代码");

                    b.Property<string>("ResearchResult")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("ResearchResult")
                        .HasComment("科研成果");

                    b.Property<string>("ScopeClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ScopeClassify")
                        .HasComment("类型(按范围分类)");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<string>("Specialization")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Specialization")
                        .HasComment("专长");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("街道");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("WorkAgeLimit")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("WorkAgeLimit")
                        .HasComment("工作年限");

                    b.Property<string>("WorkClassify")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("WorkClassify")
                        .HasComment("工作分类");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("岁");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IdCardNo");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.ToTable("AbpDoctor", null, t =>
                        {
                            t.HasComment("医生");
                        });
                });

            modelBuilder.Entity("Heal.Net.Domain.Bases.Users.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("AddressLine")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("详细地址");

                    b.Property<string>("Alias")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Alias")
                        .HasComment("别名");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime(6)")
                        .HasComment("生日");

                    b.Property<string>("BloodType")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("BloodType")
                        .HasComment("血型");

                    b.Property<string>("CityCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("城市代码");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<string>("CurrentAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("CurrentAddress")
                        .HasComment("现居住地址");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasComment("天");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<string>("DistrictCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("区县代码");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("邮箱");

                    b.Property<string>("EmergencyContact")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("EmergencyContact")
                        .HasComment("紧急联系人");

                    b.Property<string>("EmergencyContactAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("EmergencyContactAddress")
                        .HasComment("紧急联系人地址");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("EmergencyContactPhone")
                        .HasComment("紧急联系人电话");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("EmergencyContactRelationship")
                        .HasComment("紧急联系人关系");

                    b.Property<string>("Ethnicity")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Ethnicity")
                        .HasComment("民族");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Gender")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("性别");

                    b.Property<string>("GuardianAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GuardianAddress")
                        .HasComment("监护人地址");

                    b.Property<string>("GuardianBloodType")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("GuardianBloodType")
                        .HasComment("监护人血型");

                    b.Property<string>("GuardianCurrentAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GuardianCurrentAddress")
                        .HasComment("监护人现居住地");

                    b.Property<string>("GuardianEthnicity")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("GuardianEthnicity")
                        .HasComment("监护人民族");

                    b.Property<string>("GuardianGender")
                        .HasMaxLength(8)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("GuardianGender")
                        .HasComment("监护人性别");

                    b.Property<string>("GuardianHealthStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("GuardianHealthStatus")
                        .HasComment("监护人健康状况");

                    b.Property<string>("GuardianHouseholdAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GuardianHouseholdAddress")
                        .HasComment("监护人户籍地");

                    b.Property<string>("GuardianId")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianId")
                        .HasComment("监护人ID");

                    b.Property<string>("GuardianIdCard")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianIdCard")
                        .HasComment("监护人身份证号");

                    b.Property<string>("GuardianIdCardAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GuardianIdCardAddress")
                        .HasComment("监护人身份证地址");

                    b.Property<string>("GuardianIdCardBackPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("GuardianIdCardBackPhoto")
                        .HasComment("监护人身份证反面照");

                    b.Property<string>("GuardianIdCardBackPhotoDuplicate")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("GuardianIdCardBackPhotoDuplicate")
                        .HasComment("监护人身份证反面照");

                    b.Property<string>("GuardianIdCardEmblemPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("GuardianIdCardEmblemPhoto")
                        .HasComment("监护人身份证国徽照");

                    b.Property<string>("GuardianIdCardFrontPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("GuardianIdCardFrontPhoto")
                        .HasComment("监护人身份证正面照");

                    b.Property<string>("GuardianIdCardFrontPhotoDuplicate")
                        .HasColumnType("longtext");

                    b.Property<string>("GuardianIdCardValidity")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianIdCardValidity")
                        .HasComment("监护人身份证有效期");

                    b.Property<string>("GuardianMaritalStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("GuardianMaritalStatus")
                        .HasComment("监护人婚姻状况");

                    b.Property<string>("GuardianName")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianName")
                        .HasComment("监护人姓名");

                    b.Property<string>("GuardianNationality")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianNationality")
                        .HasComment("监护人国籍");

                    b.Property<string>("GuardianNativePlace")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("GuardianNativePlace")
                        .HasComment("监护人籍贯");

                    b.Property<string>("GuardianPhone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianPhone")
                        .HasComment("监护人电话");

                    b.Property<string>("GuardianPoliticalStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("GuardianPoliticalStatus")
                        .HasComment("监护人政治面貌");

                    b.Property<string>("GuardianRelationship")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("GuardianRelationship")
                        .HasComment("监护人关系");

                    b.Property<string>("GuardianResidencePermitAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("GuardianResidencePermitAddress")
                        .HasComment("监护人居住证地址");

                    b.Property<string>("GuardianResidencePermitValidity")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("GuardianResidencePermitValidity")
                        .HasComment("监护人居住证有效期");

                    b.Property<string>("HealthStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("HealthStatus")
                        .HasComment("健康状况");

                    b.Property<string>("HouseholdAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("HouseholdAddress")
                        .HasComment("户籍地址");

                    b.Property<string>("IdCardAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("IdCardAddress")
                        .HasComment("身份证地址");

                    b.Property<string>("IdCardBackPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("IdCardBackPhoto")
                        .HasComment("身份证反面照");

                    b.Property<string>("IdCardEmblemPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("IdCardEmblemPhoto")
                        .HasComment("身份证国徽照");

                    b.Property<string>("IdCardFrontPhoto")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("IdCardFrontPhoto")
                        .HasComment("身份证正面照");

                    b.Property<string>("IdCardNo")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("证件号");

                    b.Property<string>("IdCardNumber")
                        .HasMaxLength(18)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("IdCardNumber")
                        .HasComment("身份证编号");

                    b.Property<string>("IdCardType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("证件类型");

                    b.Property<string>("IdCardValidity")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("IdCardValidity")
                        .HasComment("身份证有效期");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<bool>("IsOpenLogin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsOpenLogin")
                        .HasComment("是否开通登录功能");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("MaritalStatus")
                        .HasComment("婚姻状况");

                    b.Property<string>("MedicalCardNumber")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("MedicalCardNumber")
                        .HasComment("医保卡号");

                    b.Property<string>("MedicalRecordNumber")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("MedicalRecordNumber")
                        .HasComment("病案号");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasComment("月");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<string>("NationCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("国家代码");

                    b.Property<string>("Nationality")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Nationality")
                        .HasComment("国籍");

                    b.Property<string>("NativePlace")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("NativePlace")
                        .HasComment("籍贯");

                    b.Property<string>("OrganizationCode")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("OrganizationCode")
                        .HasComment("组织Code");

                    b.Property<Guid>("OrganizationId")
                        .IsConcurrencyToken()
                        .HasColumnType("char(36)")
                        .HasColumnName("OrganizationId")
                        .HasComment("组织Id");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasComment("手机");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<string>("PoliticalStatus")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("PoliticalStatus")
                        .HasComment("政治面貌");

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasComment("省份代码");

                    b.Property<string>("ResidencePermitAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ResidencePermitAddress")
                        .HasComment("居住证地址");

                    b.Property<string>("ResidencePermitValidity")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("ResidencePermitValidity")
                        .HasComment("居住证有效期");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<string>("Source")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("Source")
                        .HasComment("来源");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<string>("Street")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("街道");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("WorkUnit")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("WorkUnit")
                        .HasComment("工作单位");

                    b.Property<string>("WorkUnitAddress")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("WorkUnitAddress")
                        .HasComment("工作单位地址");

                    b.Property<string>("WorkUnitPhone")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("WorkUnitPhone")
                        .HasComment("工作单位电话");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasComment("岁");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("IdCardNo");

                    b.HasIndex("Name");

                    b.HasIndex("Phone");

                    b.ToTable("AbpPatient", null, t =>
                        {
                            t.HasComment("患者");
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasColumnName("ApplicationName")
                        .HasComment("应用程序名称");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("BrowserInfo")
                        .HasComment("浏览器信息");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ClientId")
                        .HasComment("客户端Id");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ClientIpAddress")
                        .HasComment("客户端IP");

                    b.Property<string>("ClientName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("ClientName")
                        .HasComment("客户端名称");

                    b.Property<string>("Comments")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Comments")
                        .HasComment("评论");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CorrelationId")
                        .HasComment("相关联Id");

                    b.Property<string>("Exceptions")
                        .HasColumnType("longtext");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration")
                        .HasComment("执行耗时");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("执行时间");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("HttpMethod")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("HttpMethod")
                        .HasComment("请求方式");

                    b.Property<int?>("HttpStatusCode")
                        .HasColumnType("int")
                        .HasColumnName("HttpStatusCode")
                        .HasComment("请求响应状态码");

                    b.Property<Guid?>("ImpersonatorTenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImpersonatorTenantId")
                        .HasComment("模拟租户Id");

                    b.Property<string>("ImpersonatorTenantName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ImpersonatorTenantName")
                        .HasComment("模拟租户名称");

                    b.Property<Guid?>("ImpersonatorUserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImpersonatorUserId")
                        .HasComment("模拟用户Id");

                    b.Property<string>("ImpersonatorUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("ImpersonatorUserName")
                        .HasComment("模拟用户名");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("TenantName")
                        .HasComment("租户名称");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Url")
                        .HasComment("请求Url");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId")
                        .HasComment("用户Id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName")
                        .HasComment("用户名");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "ExecutionTime");

                    b.HasIndex("TenantId", "UserId", "ExecutionTime");

                    b.ToTable("AbpAuditLogs", null, t =>
                        {
                            t.HasComment("审计日志");
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AuditLogId")
                        .HasComment("AuditLogId");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("int")
                        .HasColumnName("ExecutionDuration")
                        .HasComment("执行耗时");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ExecutionTime")
                        .HasComment("执行时间");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("MethodName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("MethodName")
                        .HasComment("方法名称");

                    b.Property<string>("Parameters")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("Parameters")
                        .HasComment("参数");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("ServiceName")
                        .HasComment("服务名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "ServiceName", "MethodName", "ExecutionTime");

                    b.ToTable("AbpAuditLogActions", null, t =>
                        {
                            t.HasComment("审计日志-Action");
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid>("AuditLogId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AuditLogId")
                        .HasComment("AuditLogId");

                    b.Property<DateTime>("ChangeTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ChangeTime")
                        .HasComment("变更时间");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("ChangeType")
                        .HasComment("变更类型");

                    b.Property<string>("EntityId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("EntityId")
                        .HasComment("审计实体Id");

                    b.Property<Guid?>("EntityTenantId")
                        .HasColumnType("char(36)")
                        .HasComment("审计实体租户Id");

                    b.Property<string>("EntityTypeFullName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("EntityTypeFullName")
                        .HasComment("审计实体全称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("AuditLogId");

                    b.HasIndex("TenantId", "EntityTypeFullName", "EntityId");

                    b.ToTable("AbpEntityChanges", null, t =>
                        {
                            t.HasComment("审计日志-Entity");
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid>("EntityChangeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("NewValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("NewValue")
                        .HasComment("新值");

                    b.Property<string>("OriginalValue")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("OriginalValue")
                        .HasComment("旧值");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("PropertyName")
                        .HasComment("属性名称");

                    b.Property<string>("PropertyTypeFullName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PropertyTypeFullName")
                        .HasComment("属性全称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("EntityChangeId");

                    b.ToTable("AbpEntityPropertyChanges", null, t =>
                        {
                            t.HasComment("审计日志-Entity-Property");
                        });
                });

            modelBuilder.Entity("Volo.Abp.BackgroundJobs.BackgroundJobRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsAbandoned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasComment("是否放弃了");

                    b.Property<string>("JobArgs")
                        .IsRequired()
                        .HasMaxLength(1048576)
                        .HasColumnType("longtext")
                        .HasComment("任务参数");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("任务名称");

                    b.Property<DateTime?>("LastTryTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后一次运行时间");

                    b.Property<DateTime>("NextTryTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("下次运行时间");

                    b.Property<byte>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned")
                        .HasDefaultValue((byte)15)
                        .HasComment("优先级");

                    b.Property<short>("TryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasComment("重试次数");

                    b.HasKey("Id");

                    b.HasIndex("IsAbandoned", "NextTryTime");

                    b.ToTable("AbpBackgroundJobs", null, t =>
                        {
                            t.HasComment("后台任务");
                        });
                });

            modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<Guid>("ContainerId")
                        .HasColumnType("char(36)")
                        .HasComment("容器ID");

                    b.Property<byte[]>("Content")
                        .HasMaxLength(2147483647)
                        .HasColumnType("longblob")
                        .HasComment("数据");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId");

                    b.HasIndex("TenantId", "ContainerId", "Name");

                    b.ToTable("AbpBlobs", null, t =>
                        {
                            t.HasComment("Blob");
                        });
                });

            modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name");

                    b.ToTable("AbpBlobContainers", null, t =>
                        {
                            t.HasComment("Blob容器");
                        });
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("AllowedProviders")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("允许供应商");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("默认值");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("描述");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("显示名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("所属分组");

                    b.Property<bool>("IsAvailableToHost")
                        .HasColumnType("tinyint(1)")
                        .HasComment("主机是否可用");

                    b.Property<bool>("IsVisibleToClients")
                        .HasColumnType("tinyint(1)")
                        .HasComment("对客户端可见");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("父级名称");

                    b.Property<string>("ValueType")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasComment("值类型");

                    b.HasKey("Id");

                    b.HasIndex("GroupName");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AbpFeatures", null, t =>
                        {
                            t.HasComment("功能定义");
                        });
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureGroupDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("显示名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AbpFeatureGroups", null, t =>
                        {
                            t.HasComment("功能分组定义记录");
                        });
                });

            modelBuilder.Entity("Volo.Abp.FeatureManagement.FeatureValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("提供者Key");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("提供者名称");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("值");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique();

                    b.ToTable("AbpFeatureValues", null, t =>
                        {
                            t.HasComment("功能配置表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityClaimType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("描述");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否静态");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("名称");

                    b.Property<string>("Regex")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasComment("正则表达式");

                    b.Property<string>("RegexDescription")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("正则表达式描述");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否必填");

                    b.Property<int>("ValueType")
                        .HasColumnType("int")
                        .HasComment("值类型");

                    b.HasKey("Id");

                    b.ToTable("AbpClaimTypes", null, t =>
                        {
                            t.HasComment("声明类型表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityLinkUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid?>("SourceTenantId")
                        .HasColumnType("char(36)")
                        .HasComment("源租户");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("char(36)")
                        .HasComment("源用户Id");

                    b.Property<Guid?>("TargetTenantId")
                        .HasColumnType("char(36)")
                        .HasComment("目标租户");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("char(36)")
                        .HasComment("目标用户Id");

                    b.HasKey("Id");

                    b.HasIndex("SourceUserId", "SourceTenantId", "TargetUserId", "TargetTenantId")
                        .IsUnique();

                    b.ToTable("AbpLinkUsers", null, t =>
                        {
                            t.HasComment("管理用户之间的关联关系");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<string>("CustomDataPermission")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasDefaultValue("")
                        .HasColumnName("CustomDataPermission")
                        .HasComment("自定义数据权限");

                    b.Property<int>("DataPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("DataPermission")
                        .HasComment("数据权限");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("int")
                        .HasComment("版本");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsDefault")
                        .HasComment("是否默认");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsPublic")
                        .HasComment("是否公共");

                    b.Property<bool>("IsStatic")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsStatic")
                        .HasComment("是否静态");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("名称");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("标准名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpRoles", null, t =>
                        {
                            t.HasComment("角色表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("声明类型");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("声明值");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AbpRoleClaims", null, t =>
                        {
                            t.HasComment("角色声明表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySecurityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Action")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasComment("操作Action");

                    b.Property<string>("ApplicationName")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasComment("应用模块名称");

                    b.Property<string>("BrowserInfo")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasComment("浏览器信息");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("客户端Id");

                    b.Property<string>("ClientIpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("客户端IP地址");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("相关Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Identity")
                        .HasMaxLength(96)
                        .HasColumnType("varchar(96)")
                        .HasComment("身份信息");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("TenantName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("租户名称");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("用户名");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Action");

                    b.HasIndex("TenantId", "ApplicationName");

                    b.HasIndex("TenantId", "Identity");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpSecurityLogs", null, t =>
                        {
                            t.HasComment("身份安全日志");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentitySession", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ClientId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("客户端Id");

                    b.Property<string>("Device")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("设备");

                    b.Property<string>("DeviceInfo")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("设备信息");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("IpAddresses")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasComment("Ip地址");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("datetime(6)")
                        .HasComment("用户最近一次访问系统的时间");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("会话Id");

                    b.Property<DateTime>("SignedIn")
                        .HasColumnType("datetime(6)")
                        .HasComment("用户登录的时间");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.HasKey("Id");

                    b.HasIndex("Device");

                    b.HasIndex("SessionId");

                    b.HasIndex("TenantId", "UserId");

                    b.ToTable("AbpSessions", null, t =>
                        {
                            t.HasComment("会话信息");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("AccessFailedCount")
                        .HasComment("错误登录次数");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasDefaultValue("")
                        .HasColumnName("Avatar")
                        .HasComment("头像");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Email")
                        .HasComment("邮箱");

                    b.Property<bool>("EmailConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("EmailConfirmed")
                        .HasComment("邮箱确认");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("int")
                        .HasComment("版本");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<int>("Identity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("Identity")
                        .HasComment("身份标识");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsActive")
                        .HasComment("是否活跃");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<bool>("IsExternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsExternal")
                        .HasComment("是否外部");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<DateTimeOffset?>("LastPasswordChangeTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后修改密码时间");

                    b.Property<bool>("LockoutEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("LockoutEnabled")
                        .HasComment("锁定");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)")
                        .HasComment("锁定到期时间");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name")
                        .HasComment("名");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedEmail")
                        .HasComment("邮箱标准名称");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("NormalizedUserName")
                        .HasComment("用户名标准名");

                    b.Property<string>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasDefaultValue("")
                        .HasColumnName("OpenId")
                        .HasComment("第三方登录唯一标识");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("PasswordHash")
                        .HasComment("密码散列");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("PhoneNumber")
                        .HasComment("手机号码");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("PhoneNumberConfirmed")
                        .HasComment("手机号码确认");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("SecurityStamp")
                        .HasComment("安全票据");

                    b.Property<bool>("ShouldChangePasswordOnNextLogin")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否需要更改密码");

                    b.Property<string>("Surname")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Surname")
                        .HasComment("姓");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("TwoFactorEnabled")
                        .HasComment("双因素认证");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("UserName")
                        .HasComment("用户名");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("NormalizedEmail");

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("UserName");

                    b.ToTable("AbpUsers", null, t =>
                        {
                            t.HasComment("用户表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ClaimType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("声明类型");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("声明值");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AbpUserClaims", null, t =>
                        {
                            t.HasComment("用户声明表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserDelegation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("结束时间");

                    b.Property<Guid>("SourceUserId")
                        .HasColumnType("char(36)")
                        .HasComment("源用户Id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)")
                        .HasComment("开始时间");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("char(36)")
                        .HasComment("目标用户Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.ToTable("AbpUserDelegations", null, t =>
                        {
                            t.HasComment("管理用户之间的委托关系");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("登录提供者");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("登录提供者显示名称");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(196)
                        .HasColumnType("varchar(196)")
                        .HasComment("登录提供者Key");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("UserId", "LoginProvider");

                    b.HasIndex("LoginProvider", "ProviderKey");

                    b.ToTable("AbpUserLogins", null, t =>
                        {
                            t.HasComment("外部登录");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)")
                        .HasComment("组织机构Id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("OrganizationUnitId", "UserId");

                    b.HasIndex("UserId", "OrganizationUnitId");

                    b.ToTable("AbpUserOrganizationUnits", null, t =>
                        {
                            t.HasComment("用户组织机构关系表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId", "UserId");

                    b.ToTable("AbpUserRoles", null, t =>
                        {
                            t.HasComment("用户角色关系表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasComment("用户Id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("登录提供者");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasComment("值");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AbpUserTokens", null, t =>
                        {
                            t.HasComment("外部服务生成的令牌");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Address")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Address")
                        .HasComment("地址");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<string>("CoverImage")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("CoverImage")
                        .HasComment("封面图片");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("备注描述");

                    b.Property<string>("Director")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Director")
                        .HasComment("院长");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("DisplayName")
                        .HasComment("显示名称");

                    b.Property<string>("Email")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Email")
                        .HasComment("邮箱");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("int")
                        .HasComment("版本");

                    b.Property<DateTime?>("EstablishmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("EstablishmentDate")
                        .HasComment("成立时间");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Facilities")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("Facilities")
                        .HasComment("医院设施");

                    b.Property<string>("Introduction")
                        .HasMaxLength(4096)
                        .HasColumnType("varchar(4096)")
                        .HasColumnName("Introduction")
                        .HasComment("医院简介");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<bool?>("IsEmergencyServices")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsEmergencyServices")
                        .HasComment("是否提供急诊服务");

                    b.Property<bool?>("IsInsuranceAccepted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("IsInsuranceAccepted")
                        .HasComment("是否接受医保");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Latitude")
                        .HasComment("纬度");

                    b.Property<int?>("Level")
                        .HasColumnType("int")
                        .HasColumnName("Level")
                        .HasComment("医院等级");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("Longitude")
                        .HasComment("经度");

                    b.Property<DateTime?>("OperatingHours")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("OperatingHours")
                        .HasComment("营业时间");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasComment("父级Id");

                    b.Property<string>("ParkingInformation")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("ParkingInformation")
                        .HasComment("停车信息");

                    b.Property<string>("Phone")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Phone")
                        .HasComment("联系电话");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("PostalCode")
                        .HasComment("邮政编码");

                    b.Property<string>("ServiceHotline")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("ServiceHotline")
                        .HasComment("服务热线");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.Property<string>("TrafficGuide")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("TrafficGuide")
                        .HasComment("交通指南");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("WebsiteUrl")
                        .HasComment("官方网站");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("ParentId");

                    b.ToTable("AbpOrganizationUnits", null, t =>
                        {
                            t.HasComment("组织机构");
                        });
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.Property<Guid>("OrganizationUnitId")
                        .HasColumnType("char(36)")
                        .HasComment("组织机构Id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)")
                        .HasComment("角色Id");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("OrganizationUnitId", "RoleId");

                    b.HasIndex("RoleId", "OrganizationUnitId");

                    b.ToTable("AbpOrganizationUnitRoles", null, t =>
                        {
                            t.HasComment("组织机构角色");
                        });
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ApplicationType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("与应用程序关联的应用程序类型");

                    b.Property<string>("ClientId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("与当前应用程序关联的客户端标识符");

                    b.Property<string>("ClientSecret")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的客户端密钥。注意：根据创建此实例的应用程序管理器，该属性可能出于安全原因被哈希或加密");

                    b.Property<string>("ClientType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("与应用程序关联的客户端类型");

                    b.Property<string>("ClientUri")
                        .HasColumnType("longtext")
                        .HasComment("指向客户端更多信息的 URI");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<string>("ConsentType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("与当前应用程序关联的同意类型");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的显示名称");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的本地化显示名称，序列化为 JSON 对象");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<string>("JsonWebKeySet")
                        .HasColumnType("longtext")
                        .HasComment("与应用程序关联的 JSON Web Key Set，序列化为 JSON 对象");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("LogoUri")
                        .HasColumnType("longtext")
                        .HasComment("指向客户端标志的 URI");

                    b.Property<string>("Permissions")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的权限，序列化为 JSON 数组");

                    b.Property<string>("PostLogoutRedirectUris")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的登出回调 URL，序列化为 JSON 数组");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasComment("附加属性，序列化为 JSON 对象；如果未与当前应用程序关联任何属性，则为 null");

                    b.Property<string>("RedirectUris")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的回调 URL，序列化为 JSON 数组");

                    b.Property<string>("Requirements")
                        .HasColumnType("longtext")
                        .HasComment("与当前应用程序关联的要求，序列化为 JSON 数组");

                    b.Property<string>("Settings")
                        .HasColumnType("longtext")
                        .HasComment("设置，序列化为 JSON 对象");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("OpenIddictApplications", null, t =>
                        {
                            t.HasComment("OpenIddict-应用程序");
                        });
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("char(36)")
                        .HasComment("与当前授权关联的应用程序的唯一标识符");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("当前授权的 UTC 创建日期");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasComment("附加属性，序列化为 JSON 对象；如果未与当前授权关联任何属性，则为 null");

                    b.Property<string>("Scopes")
                        .HasColumnType("longtext")
                        .HasComment("与当前授权关联的作用域，序列化为 JSON 数组");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("当前授权的状态");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasComment("与当前授权关联的主体");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("当前授权的类型");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictAuthorizations", null, t =>
                        {
                            t.HasComment("OpenIddict-授权信息");
                        });
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Scopes.OpenIddictScope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasComment("与当前作用域关联的公开描述");

                    b.Property<string>("Descriptions")
                        .HasColumnType("longtext")
                        .HasComment("与当前作用域关联的本地化公开描述，序列化为 JSON 对象");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext")
                        .HasComment("与当前作用域关联的显示名称");

                    b.Property<string>("DisplayNames")
                        .HasColumnType("longtext")
                        .HasComment("与当前作用域关联的本地化显示名称，序列化为 JSON 对象");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasComment("与当前作用域关联的唯一名称");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasComment("附加属性，序列化为 JSON 对象；如果未与当前作用域关联任何属性，则为 null");

                    b.Property<string>("Resources")
                        .HasColumnType("longtext")
                        .HasComment("与当前作用域关联的资源，序列化为 JSON 数组");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("OpenIddictScopes", null, t =>
                        {
                            t.HasComment("OpenIddict-授权范围");
                        });
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("char(36)")
                        .HasComment("与当前令牌关联的应用程序的唯一标识符");

                    b.Property<Guid?>("AuthorizationId")
                        .HasColumnType("char(36)")
                        .HasComment("与当前令牌关联的授权的唯一标识符");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("当前令牌的 UTC 创建日期");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("当前令牌的 UTC 过期日期");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Payload")
                        .HasColumnType("longtext")
                        .HasComment("当前令牌的有效载荷（如果适用）。注意：此属性仅用于引用令牌，可能出于安全原因被加密");

                    b.Property<string>("Properties")
                        .HasColumnType("longtext")
                        .HasComment("附加属性，序列化为 JSON 对象；如果未与当前令牌关联任何属性，则为 null");

                    b.Property<DateTime?>("RedemptionDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("当前令牌的 UTC 兑换日期");

                    b.Property<string>("ReferenceId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasComment("与当前令牌关联的引用标识符（如果适用）。注意：此属性仅用于引用令牌，可能出于安全原因被哈希或加密");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("当前令牌的状态");

                    b.Property<string>("Subject")
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasComment("与当前令牌关联的主体");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("当前令牌的类型");

                    b.HasKey("Id");

                    b.HasIndex("AuthorizationId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("ApplicationId", "Status", "Subject", "Type");

                    b.ToTable("OpenIddictTokens", null, t =>
                        {
                            t.HasComment("OpenIddict-颁发的Token");
                        });
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("权限显示名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限组名称");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否启用");

                    b.Property<byte>("MultiTenancySide")
                        .HasColumnType("tinyint unsigned")
                        .HasComment("供应商多个,隔开");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限名称");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限父级名称");

                    b.Property<string>("Providers")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限供应者");

                    b.Property<string>("StateCheckers")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("权限额外属性");

                    b.HasKey("Id");

                    b.HasIndex("GroupName");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AbpPermissions", null, t =>
                        {
                            t.HasComment("权限定义");
                        });
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限名称");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("权限提供者Key(如:角色key admin)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("权限提供者名称(如:角色R)");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("TenantId", "Name", "ProviderName", "ProviderKey")
                        .IsUnique();

                    b.ToTable("AbpPermissionGrants", null, t =>
                        {
                            t.HasComment("权限管理");
                        });
                });

            modelBuilder.Entity("Volo.Abp.PermissionManagement.PermissionGroupDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("权限组显示名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("权限组名称");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AbpPermissionGroups", null, t =>
                        {
                            t.HasComment("权限分组");
                        });
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.Setting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("配置名称");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("提供者Key");

                    b.Property<string>("ProviderName")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("提供者名称");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasComment("配置值");

                    b.HasKey("Id");

                    b.HasIndex("Name", "ProviderName", "ProviderKey")
                        .IsUnique();

                    b.ToTable("AbpSettings", null, t =>
                        {
                            t.HasComment("配置表");
                        });
                });

            modelBuilder.Entity("Volo.Abp.SettingManagement.SettingDefinitionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(2048)")
                        .HasComment("默认值");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasComment("描述");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasComment("显示名称");

                    b.Property<string>("ExtraProperties")
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsEncrypted")
                        .HasColumnType("tinyint(1)")
                        .HasComment("此设置是否以加密方式存储在数据源中");

                    b.Property<bool>("IsInherited")
                        .HasColumnType("tinyint(1)")
                        .HasComment("此设置是从父作用域继承的吗");

                    b.Property<bool>("IsVisibleToClients")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasComment("名称");

                    b.Property<string>("Providers")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("提供者多个,隔开");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AbpSettingDefinitions", null, t =>
                        {
                            t.HasComment("配置定义");
                        });
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<int>("EntityVersion")
                        .HasColumnType("int")
                        .HasComment("实体版本号，用于并发控制或数据版本管理");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("名称");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("标准化的名称（通常是去除空格、转换为小写等处理后的名称）");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedName");

                    b.ToTable("AbpTenants", null, t =>
                        {
                            t.HasComment("租户");
                        });
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasComment("名称");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasComment("值");

                    b.HasKey("TenantId", "Name");

                    b.ToTable("AbpTenantConnectionStrings", null, t =>
                        {
                            t.HasComment("租户配置");
                        });
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLogAction", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("Actions")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.AuditLog", null)
                        .WithMany("EntityChanges")
                        .HasForeignKey("AuditLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityPropertyChange", b =>
                {
                    b.HasOne("Volo.Abp.AuditLogging.EntityChange", null)
                        .WithMany("PropertyChanges")
                        .HasForeignKey("EntityChangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.BlobStoring.Database.DatabaseBlob", b =>
                {
                    b.HasOne("Volo.Abp.BlobStoring.Database.DatabaseBlobContainer", null)
                        .WithMany()
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRoleClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserClaim", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserLogin", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserOrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("OrganizationUnits")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUserToken", b =>
                {
                    b.HasOne("Volo.Abp.Identity.IdentityUser", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnitRole", b =>
                {
                    b.HasOne("Volo.Abp.Identity.OrganizationUnit", null)
                        .WithMany("Roles")
                        .HasForeignKey("OrganizationUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Volo.Abp.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", b =>
                {
                    b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId");
                });

            modelBuilder.Entity("Volo.Abp.OpenIddict.Tokens.OpenIddictToken", b =>
                {
                    b.HasOne("Volo.Abp.OpenIddict.Applications.OpenIddictApplication", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId");

                    b.HasOne("Volo.Abp.OpenIddict.Authorizations.OpenIddictAuthorization", null)
                        .WithMany()
                        .HasForeignKey("AuthorizationId");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.TenantConnectionString", b =>
                {
                    b.HasOne("Volo.Abp.TenantManagement.Tenant", null)
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.AuditLog", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("EntityChanges");
                });

            modelBuilder.Entity("Volo.Abp.AuditLogging.EntityChange", b =>
                {
                    b.Navigation("PropertyChanges");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityRole", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Volo.Abp.Identity.IdentityUser", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("OrganizationUnits");

                    b.Navigation("Roles");

                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Volo.Abp.Identity.OrganizationUnit", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("Volo.Abp.TenantManagement.Tenant", b =>
                {
                    b.Navigation("ConnectionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
