// <auto-generated />
using System;
using Heal.Dict.EntityFrameworkCore.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volo.Abp.EntityFrameworkCore;

#nullable disable

namespace Heal.Dict.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HealDictDbContext))]
    [Migration("20250506053754_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("_Abp_DatabaseProvider", EfCoreDatabaseProvider.MySql)
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            //MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Heal.Dict.Domain.Dictes.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Alias")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Alias")
                        .HasComment("别名");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<Guid>("DictTypeId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DictTypeId")
                        .HasComment("所属类型Id");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Key")
                        .HasComment("键");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ParentId")
                        .HasComment("父级Id");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<string>("Style")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("Style")
                        .HasComment("样式");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.HasIndex("DictTypeId");

                    b.ToTable("AbpDictItem", null, t =>
                        {
                            t.HasComment("字典项");
                        });
                });

            modelBuilder.Entity("Heal.Dict.Domain.Dictes.Entities.DictType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("Id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(95)
                        .HasColumnType("varchar(95)")
                        .HasColumnName("Code")
                        .HasComment("编码");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("ConcurrencyStamp")
                        .HasComment("迸发标记");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("CreationTime")
                        .HasComment("创建时间");

                    b.Property<Guid?>("CreatorId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatorId")
                        .HasComment("创建人Id");

                    b.Property<string>("CreatorName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("CreatorName")
                        .HasComment("创建人名称");

                    b.Property<Guid?>("DeleterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("DeleterId")
                        .HasComment("删除人Id");

                    b.Property<string>("DeletionName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("DeletionName")
                        .HasComment("删除人名称");

                    b.Property<DateTime?>("DeletionTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("DeletionTime")
                        .HasComment("删除时间");

                    b.Property<string>("Describe")
                        .IsConcurrencyToken()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Describe")
                        .HasComment("描述");

                    b.Property<string>("ExtraProperties")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("ExtraProperties")
                        .HasComment("扩展字段");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false)
                        .HasColumnName("IsDeleted")
                        .HasComment("删除标记");

                    b.Property<string>("LastModificationName")
                        .IsConcurrencyToken()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("LastModificationName")
                        .HasComment("最后修改人名称");

                    b.Property<DateTime?>("LastModificationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("LastModificationTime")
                        .HasComment("最后更新时间");

                    b.Property<Guid?>("LastModifierId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LastModifierId")
                        .HasComment("最后更新人");

                    b.Property<string>("Name")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("Name")
                        .HasComment("名称");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ParentId")
                        .HasComment("父级Id");

                    b.Property<string>("Pinyin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("varchar(512)")
                        .HasColumnName("Pinyin")
                        .HasComment("拼音");

                    b.Property<string>("PinyinFirstLetters")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("PinyinFirstLetters")
                        .HasComment("拼音首字母");

                    b.Property<int>("Sort")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Sort")
                        .HasComment("排序字段");

                    b.Property<int>("Status")
                        .IsConcurrencyToken()
                        .HasColumnType("int")
                        .HasColumnName("Status")
                        .HasComment("启用状态");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("TenantId")
                        .HasComment("租户Id");

                    b.HasKey("Id");

                    b.ToTable("AbpDictType", null, t =>
                        {
                            t.HasComment("字典类型");
                        });
                });

            modelBuilder.Entity("Heal.Dict.Domain.Dictes.Entities.DictItem", b =>
                {
                    b.HasOne("Heal.Dict.Domain.Dictes.Entities.DictType", null)
                        .WithMany("Items")
                        .HasForeignKey("DictTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Heal.Dict.Domain.Dictes.Entities.DictType", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
